#!/usr/bin/env python

import sys

from PySide2.QtCore import *
from PySide2.QtGui import *
from PySide2.QtWidgets import *

from raspbioloid_gui import GUI, custom_spin_box

import rospy

from std_msgs.msg import String, Float32
from std_srvs.srv import SetBool
from motors_msgs.msg import MotorInfo
from motors_srvs.srv import MoveMotor, Torque, TorqueAll
from pico_srvs.srv import PicoInfo, PicoLowLevel
from sensor_msgs.msg import Imu

class Application(QMainWindow):
  statusReceived = Signal(int, MotorInfo)
  imuReceived = Signal(Imu)
  
  def __init__(self):
    super(Application, self).__init__()
    self.ui = GUI.Ui_MainWindow()
    self.ui.setupUi(self)
    self.fssd_enabled=False
    
    self.spinboxes =  [self.ui.m_01_spinbox, self.ui.m_02_spinbox, self.ui.m_03_spinbox, self.ui.m_04_spinbox,
                       self.ui.m_05_spinbox, self.ui.m_06_spinbox, self.ui.m_07_spinbox, self.ui.m_08_spinbox, 
                       self.ui.m_09_spinbox, self.ui.m_10_spinbox, self.ui.m_11_spinbox, self.ui.m_12_spinbox,
                       self.ui.m_13_spinbox, self.ui.m_14_spinbox, self.ui.m_15_spinbox, self.ui.m_16_spinbox, 
                       self.ui.m_17_spinbox, self.ui.m_18_spinbox]
    self.checkboxes = [self.ui.lock_01, self.ui.lock_02, self.ui.lock_03, self.ui.lock_04,
                       self.ui.lock_05, self.ui.lock_06, self.ui.lock_07, self.ui.lock_08, 
                       self.ui.lock_09, self.ui.lock_10, self.ui.lock_11, self.ui.lock_12,
                       self.ui.lock_13, self.ui.lock_14, self.ui.lock_15, self.ui.lock_16, 
                       self.ui.lock_17, self.ui.lock_18]

    rospy.init_node('raspbioloid_control_panel', anonymous=True)

    rospy.wait_for_service("move_motor")
    self.move_srv = rospy.ServiceProxy("move_motor", MoveMotor)

    rospy.wait_for_service("torque_motor")
    self.torque_srv = rospy.ServiceProxy("torque_motor", Torque)
    
    rospy.wait_for_service("torque_all")
    self.torque_all_srv = rospy.ServiceProxy("torque_all", TorqueAll)
    
    rospy.wait_for_service("pico_info")
    self.pico_info_srv = rospy.ServiceProxy("pico_info", PicoInfo)
    
    rospy.wait_for_service("pico_enable_fssd")
    self.pico_enable_fssd_srv = rospy.ServiceProxy("pico_enable_fssd", SetBool)
    
    rospy.wait_for_service("pico_set_low_level")
    self.pico_set_low_level_srv = rospy.ServiceProxy("pico_set_low_level", PicoLowLevel)

    for i in range(1, 19):
      rospy.Subscriber("/motors_info/%d" % i,
                       MotorInfo,
                       lambda msg, i=i, p = self.statusReceived: p.emit(i-1, msg))
                   
      #TODO: implement speed
      self.spinboxes[i-1].enterKeyPressed.connect(lambda degrees, i=i, f=self.set_goal: f(i, degrees/360.0*1024, 30))
      self.checkboxes[i-1].stateChanged.connect(lambda checked, i=i, f=self.set_torque: f(i, checked))

    self.statusReceived.connect(self.consume)

    rospy.Subscriber("/imu/data",
                     Imu, 
                     lambda msg, i=i, p = self.imuReceived: p.emit(msg))
                       
    self.imuReceived.connect(self.update_imu_status)
    
    self.ui.button_lock_all.clicked.connect(self.lock_all)
    self.ui.button_unlock_all.clicked.connect(self.unlock_all)
        
    self.setUpdatesEnabled(False)
    self.redraw_timer = QTimer()
    self.redraw_timer.timeout.connect(self.redraw)
    self.redraw_timer.start(40)
    
    self.pico_timer = QTimer()
    self.pico_timer.timeout.connect(self.update_pico_panel)
    self.pico_timer.start(5000)
    self.update_pico_panel()
    
    self.ui.button_fssd.connect(toggle_ffsd)
    self.pico_enable_fssd_srv(False)

  def toggle_fssd(self):
    self.ui.button_fssd.set_enabled(False)
    if self.fssd_enabled = False:
      self.pico_set_low_level_srv(self.ui.min_ext_voltage.value)
      self.pico_enable_fssd_srv(True)
      self.ui.button_fssd.setText("Disable")
    else:
      self.pico_enable_fssd_srv(False)
      self.ui.button_fssd.setText("Enable")
      
    self.fssd_enabled = not self.fssd_enabled
    self.ui.button_fssd.set_enabled(True)

  def update_pico_panel(self):
    ret = self.pico_info_srv()
    self.ui.b_status.setText(ret.status)
    self.ui.b_temp.setText("%d" % ret.temperature)
    self.ui.b_source.setText(ret.power_source)
    self.ui.b_charging.setText("charging" if ret.charge_status else "discharging")
    self.ui.b_ext.setText("%.2f" % ret.ext_voltage)
    self.ui.b_onboard.setText("%.2f" % ret.batt_voltage)
    self.ui.b_rpi.setText("%.2f" % ret.rpi_voltage)
    
  def redraw(self):
    self.setUpdatesEnabled(True)
    self.repaint()
    self.setUpdatesEnabled(False)
    
  def set_torque(self, dxl_id, lock):
    self.torque_srv(dxl_id, lock!=0)
    
  def lock_all(self):
    self.torque_all_srv(True)
    
  def unlock_all(self):
    self.torque_all_srv(False)
    
  def set_goal(self, dxl_id, pos, speed):
    self.move_srv(dxl_id, pos, speed)
    
  def consume(self, dxl_id, msg):
    self.spinboxes[dxl_id].setStatus(msg.Pos, 
                                     msg.Goal if msg.Locked else msg.Pos, 
                                     msg.Load if msg.Locked else 0)
    self.checkboxes[dxl_id].setCheckState(Qt.CheckState.Checked if msg.Locked else Qt.CheckState.Unchecked)

  def update_imu_status(self, mes):
    o = mes.orientation
    av = mes.angular_velocity
    la = mes.linear_acceleration
    self.setUpdatesEnabled(False)
    self.ui.position_x.setText("x: %.3f" % o.x)
    self.ui.position_y.setText("y: %.3f" % o.y)
    self.ui.position_z.setText("z: %.3f" % o.z)
    self.ui.speed_x.setText("x: %.3f" % av.x)
    self.ui.speed_y.setText("y: %.3f" % av.y)
    self.ui.speed_z.setText("z: %.3f" % av.z)
    self.ui.acceleration_x.setText("x: %.3f" % la.x)
    self.ui.acceleration_y.setText("y: %.3f" % la.y)
    self.ui.acceleration_z.setText("z: %.3f" % la.z)
    self.setUpdatesEnabled(True)

def main():
  app = QApplication(sys.argv)
  form = Application()
  form.show()
  app.exec_()

if __name__ == '__main__':
  try:
    main()
  except rospy.ROSInterruptException:
    pass
